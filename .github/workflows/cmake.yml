name: CMake

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]
  release:
    type: [created, edited]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
         # - macos-latest

    runs-on: ${{matrix.os}}

    steps:
      - uses: actions/checkout@v2

      - name: "Windows: Configure environment"
        if: runner.os == 'Windows'
        shell: bash
        run: |
          # Select MinGW toolchain instead of the default MSVC.
          echo "CMAKE_GENERATOR=MinGW Makefiles" >> $GITHUB_ENV
      - name: "Linux: Install dependency libraries"
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends freeglut3-dev libudev-dev libopenal-dev pkg-config libalsa-ocaml-dev
      - name: Configure CMake
        working-directory: ${{github.workspace}}/
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        working-directory: ${{github.workspace}}/
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Test
        working-directory: ${{github.workspace}}/build
        run: ctest -C ${{env.BUILD_TYPE}}

      - uses: actions/upload-artifact@v2
        if: runner.os == 'Linux'
        with:
          name: binaries
          path: ${{github.workspace}}/lin_64/*.xpl
          if-no-files-found: error

  package:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        if: runner.os == 'Linux'
        with:
          name: binaries
          path: XMidiCtrl/lin_64

      - uses: actions/upload-artifact@v2
        with:
          name: xmidictrl_plugin
          path: |
            ${{github.workspace}}/xmidictrl*
          if-no-files-found: error

      - name: Create plugin archive
        if: github.event_name == 'release'
        run: zip -r xmidictrl.zip xmidictrl/

      - name: Upload binaries to release
        if: github.event_name == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: xmidictrl.zip
          tag: ${{ github.ref }}
          overwrite: true
